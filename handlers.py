from datetime import datetime, date

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from keyboards import welcome
from kudagoapi import get_cinema_events

router = Router()

CITYLIST = {
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "spb",
    "–ú–æ—Å–∫–≤–∞": "msk",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekaterinburg",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": "nizhniy-novgorod",
    "–ö–∞–∑–∞–Ω—å": "kazan",
    "–í—ã–±–æ—Ä–≥": "vyborg",
    "–°–∞–º–∞—Ä–∞": "samara",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": "krasnodar",
    "–°–æ—á–∏": "sochi",
    "–£—Ñ–∞": "ufa",
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "krasnoyarsk"
}


class Form(StatesGroup):
    city = State()
    date = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ GoCinemaBot üé•'
        '\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π —É–¥–æ–±–Ω—ã–π –∫–∏–Ω–æ—Å–µ–∞–Ω—Å,'
        '\n–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîç –ü–æ–∏—Å–∫" –∏ —Å–∫–æ—Ä–µ–µ –Ω–∞ —Ñ–∏–ª—å–º!',
        reply_markup=welcome())


@router.callback_query(F.data == "search")
async def sh_cb(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.answer(text="üåç –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ú–æ—Å–∫–≤–∞,"
                                       "\n–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥,"
                                       "\n–ö–∞–∑–∞–Ω—å, –í—ã–±–æ—Ä–≥, –°–∞–º–∞—Ä–∞, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä,"
                                       "\n–°–æ—á–∏, –£—Ñ–∞, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫")
    await state.set_state(Form.city)
    await callback.answer()


@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    user_city = message.text.strip()

    if user_city not in CITYLIST:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö')
        return
    await state.update_data(user_city=user_city)
    await state.set_state(Form.date)
    await message.answer('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏ –≤ –∫–∏–Ω–æ')


@router.message(Form.date)
async def process_date(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_city = user_data["user_city"]
    input_text = message.text.strip()
    kudago_city = CITYLIST.get(user_city)
    try:
        pars_date = datetime.strptime(input_text, "%Y-%m-%d")
        if pars_date.date() < date.today():
            await message.answer("‚ùå –ú—ã, –ø–æ–∫–∞ —á—Ç–æ, –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ ü•≤")
        else:
            await message.answer('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞')
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥")
        return
    formatted_date = pars_date.strftime("%Y-%m-%d")

    try:
        events = await get_cinema_events(kudago_city, formatted_date)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await state.clear()
        return
    if not events:
        await message.answer("üòï –ö–∏–Ω–æ—Å–µ–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
    else:
        for movie in events:
            title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            place = movie.get("place") or {}
            place_title = place.get("title", "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            await message.answer(f"üé¨ {title}\nüìç {place_title}")
    import json

    if events:
        debug = json.dumps(events[0], indent=2, ensure_ascii=False)
        await message.answer(f"üîç –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞:\n<pre>{debug}</pre>", parse_mode="HTML")
    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ –æ—Ç API.")

    await state.clear()
