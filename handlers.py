
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards import welcome
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

router = Router()

CITYLIST = ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ú–æ—Å–∫–≤–∞", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ö–∞–∑–∞–Ω—å",
            "–í—ã–±–æ—Ä–≥", "–°–∞–º–∞—Ä–∞", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–°–æ—á–∏", "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"]

class Form(StatesGroup):
    city = State()
    date = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ GoCinemaBot üé•'
        f'\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π —É–¥–æ–±–Ω—ã–π –∫–∏–Ω–æ—Å–µ–∞–Ω—Å,'
        f'\n–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîç –ü–æ–∏—Å–∫" –∏ —Å–∫–æ—Ä–µ–µ –Ω–∞ —Ñ–∏–ª—å–º!',
        reply_markup=welcome())

@router.callback_query(F.data == "search")
async def sh_cb(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.answer(text="üåç –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ú–æ—Å–∫–≤–∞,"
                                       "\n–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥,"
                                       "\n–ö–∞–∑–∞–Ω—å, –í—ã–±–æ—Ä–≥, –°–∞–º–∞—Ä–∞, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä,"
                                       "\n–°–æ—á–∏, –£—Ñ–∞, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫")
    await state.set_state(Form.city)
    await callback.answer()

@router.message(Form.city)
async def process_city(message: Message, state: FSMContext) -> None:
    await state.update_data(city=message.text)
    user_city = message.text.strip()

    if user_city not in CITYLIST:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö')
        return
    await state.set_state(Form.date)






